trigger:
  - master

pr:
  - master

jobs:
  - job: Build
    strategy:
      matrix:
        linux-x64:
          imageName: 'ubuntu-16.04'
          deskGapPlatform: 'linux-x64'
        win32-ia32:
          imageName: 'windows-2019'
          deskGapPlatform: 'win32-ia32'
        darwin-x64:
          imageName: 'macos-10.14'
          deskGapPlatform: 'darwin-x64'
    pool:
      vmImage: $(imageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'

    - script: |
        wget https://github.com/Kitware/CMake/releases/download/v3.15.5/cmake-3.15.5-Linux-x86_64.tar.gz
        tar -xvf cmake-3.15.5-Linux-x86_64.tar.gz > /dev/null
        export PATH=$PWD/cmake-3.15.5-Linux-x86_64/bin:$PATH
        echo "##vso[task.setvariable variable=PATH]$PATH"
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'Install the up-to-date version of CMake on Linux'

    - script: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test > /dev/null
        sudo apt-get update -y  > /dev/null
        sudo apt-get install -y g++-8
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 60 --slave /usr/bin/g++ g++ /usr/bin/g++-8
        sudo update-alternatives --config gcc
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'Install gcc-8 and g++-8 on Linux'

    - script: |
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'Install dev files of gtk and webkit on Linux'

    - script: |
        brew install cmake
      condition: eq( variables['Agent.OS'], 'Darwin' )
      displayName: 'Install the up-to-date version of CMake on macOS'

    - script: npm ci
      displayName: 'npm ci'

    - bash: |
        cmake --version
        bash node/scripts/build.sh
      displayName: 'Build'

    - publish: $(System.DefaultWorkingDirectory)/dist_build/dist
      artifact: $(deskGapPlatform)

  - job: PrepareNPM
    dependsOn: Build
    displayName: 'Prepare npm Package'
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          targetPath: "$(Pipeline.Workspace)/dists"
      - bash: |
          npm ci
          bash node/scripts/prepare-npm.sh "$(Pipeline.Workspace)/dists"
      - publish: $(System.DefaultWorkingDirectory)/npm.tgz
        artifact: npmTarball
      - publish: $(System.DefaultWorkingDirectory)/dist_zips
        artifact: distZips

  - job: Test
    dependsOn: Build
    strategy:
      matrix:
        win2019:
          imageName: 'windows-2019'
          deskGapPlatform: 'win32-ia32'
        win2016:
          imageName: 'vs2017-win2016'
          deskGapPlatform: 'win32-ia32'
        win2012r2:
          imageName: 'vs2015-win2012r2'
          deskGapPlatform: 'win32-ia32'
        mac:
          imageName: 'macos-10.14'
          deskGapPlatform: 'darwin-x64'
        linux:
          imageName: 'ubuntu-16.04'
          deskGapPlatform: 'linux-x64'
    pool:
      vmImage: $(imageName)
    steps:
    - download: current
      artifact: $(deskGapPlatform)

    - script: chmod -R 755 "$(Pipeline.Workspace)/$(deskGapPlatform)"
      displayName: 'Set Permissions'
      condition: ne(variables['Agent.OS'], 'Windows_NT')

    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'

    - script: npm ci
      displayName: 'npm ci'

    - script: sudo apt-get install -y libwebkit2gtk-4.0-37 > /dev/null
      displayName: 'Install webkit2gtk'
      condition: eq(variables['Agent.OS'], 'Linux')

    - script: |
        /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 6
      displayName: 'Start xvfb'
      condition: eq(variables['Agent.OS'], 'Linux')

    - bash: node node/test/start.js "$(Pipeline.Workspace)/$(deskGapPlatform)"
      displayName: 'Test'
      env:
        DISPLAY: ':99.0'

  - job: TestNPM
    displayName: 'Test npm Package'
    dependsOn: PrepareNPM
    strategy:
      matrix:
        win:
          imageName: 'windows-2019'
          deskGapPlatform: 'win32-ia32'
        mac:
          imageName: 'macos-10.14'
          deskGapPlatform: 'darwin-x64'
        linux:
          imageName: 'ubuntu-16.04'
          deskGapPlatform: 'linux-x64'
    pool:
      vmImage: $(imageName)
    steps:
      - download: current
        artifact: npmTarball
      - download: current
        artifact: distZips
      - bash: DESKGAP_DIST_FOLDER="$(Pipeline.Workspace)/distZips" bash node/scripts/test-npm.sh "$(Pipeline.Workspace)/npm.tgz"
