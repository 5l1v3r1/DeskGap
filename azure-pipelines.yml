trigger:
  - master

pr:
  - master

jobs:
  - job: build
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-16.04'
          cmakeGenerator: 'Unix Makefiles'
          buildDistPath: 'build/Release'
        win:
          imageName: 'windows-2019'
          cmakeGenerator: 'Visual Studio 16 2019'
          buildDistPath: 'build/Release'
          dgUserName: 'DeskGapUser'
          dgUserPass: 'A4_bg3dVd'
        mac:
          imageName: 'macos-10.14'
          cmakeGenerator: 'Unix Makefiles'
          buildDistPath: 'build'
    pool:
      vmImage: $(imageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'

    - script: |
        wget https://github.com/Kitware/CMake/releases/download/v3.15.5/cmake-3.15.5-Linux-x86_64.tar.gz
        tar -xvf cmake-3.15.5-Linux-x86_64.tar.gz > /dev/null
        export PATH=$PWD/cmake-3.15.5-Linux-x86_64/bin:$PATH
        echo "##vso[task.setvariable variable=PATH]$PATH"
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'Install the up-to-date version of CMake on Linux'

    - script: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test > /dev/null
        sudo apt-get update -y  > /dev/null
        sudo apt-get install -y g++-8
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 60 --slave /usr/bin/g++ g++ /usr/bin/g++-8
        sudo update-alternatives --config gcc
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'Install gcc-8 and g++-8 on Linux'

    - script: |
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev
      condition: eq( variables['Agent.OS'], 'Linux' )
      displayName: 'Install dev files of gtk and webkit on Linux'

    - script: |
        brew install cmake
      condition: eq( variables['Agent.OS'], 'Darwin' )
      displayName: 'Install the up-to-date version of CMake on macOS'

    - script: |
        choco install -y pstools
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
      displayName: 'Install the psexec tool on Windows'

    - script: |
        npm ci
      displayName: 'npm ci'

    - bash: |
        cmake --version
        echo CMake Configuring
        cmake -G '$(cmakeGenerator)' -DCMAKE_BUILD_TYPE=Release -S node -B build
        echo CMake Building
        cmake --build build --config Release
      displayName: 'Build'

    - script: |
        /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 6
      displayName: Start xvfb
      condition: eq(variables['Agent.OS'], 'Linux')

    - bash:
        node node/test/start.js $(buildDistPath)
      displayName: 'Test'
      env:
        DISPLAY: ':99.0'

    - powershell: |
        New-Variable -Name Key
        New-Variable -Name PromptOnSecureDesktop_Name
        New-Variable -Name ConsentPromptBehaviorAdmin_Name

        Function Set-RegistryValue {
          [cmdletbinding(SupportsShouldProcess=$True,ConfirmImpact="Low")]
          Param ($key, $name, $value, $type="Dword")
          If ((Test-Path -Path $key) -Eq $false) { New-Item -ItemType Directory -Path $key | Out-Null }
          	If ($pscmdlet.ShouldProcess($value)) {
               Set-ItemProperty -Path $key -Name $name -Value $value -Type $type
        	}
        }

        Function Get-RegistryValue($key, $value) {
           (Get-ItemProperty $key $value).$value
        }

        $Key = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"

        Set-RegistryValue -Key $Key -Name "ConsentPromptBehaviorAdmin" -Value 2
        Set-RegistryValue -Key $Key -Name "PromptOnSecureDesktop" -Value 1
        Set-RegistryValue -Key $Key -Name "EnableLUA" -Value 1
        Set-RegistryValue -Key $Key -Name "FilterAdministratorToken" -Value 1
      displayName: 'Turn on UAC'
      condition: eq(variables['Agent.OS'], 'Windows_NT')

    - powershell: |
        $taskname = "Test DeskGap without admin rights"
        $action = New-ScheduledTaskAction -WorkingDirectory $pwd -Execute "cmd" -Argument "/V:ON /c node node/test/start.js $(buildDistPath) > test_stdout 2> test_stderr & echo !ERRORLEVEL! > test_errlevel"
        $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date)
        Register-ScheduledTask -Action $action -Trigger $trigger -TaskName $taskname | Out-Null
        Start-ScheduledTask -TaskName $taskname

        While ((schtasks.exe /query /TN "$taskname" /FO CSV | ConvertFrom-Csv | select -expandproperty Status -first 1) -eq "Running") {
        	sleep -s 5
        }

        Unregister-ScheduledTask -TaskName $taskname -Confirm:$false

        $test_stdout = Get-Content test_stdout | Out-String
        $test_stderr = Get-Content test_stderr | Out-String
        $test_errlevel = Get-Content test_errlevel | Out-String
        Write-Output $test_stdout
        Write-Output $test_stderr
        exit $test_errlevel

      displayName: 'Test on Windows without admin privilege'
      condition: eq(variables['Agent.OS'], 'Windows_NT')
